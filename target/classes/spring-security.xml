<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 不拦截静态资源(根据需求可配置很多个) -->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>

    <!-- 配置不拦截指定页面(根据需求可配置很多个) -->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/error.jsp" security="none"/>

    <!--
        配置拦截的规则;
        auto-config="是否使用自带的页面",
        use-expressions="是否使用spel表达式",
        如果使用表达式: hasRole('ROLE_USER')
    -->
    <security:http auto-config="true" use-expressions="false">
        <!-- 配置拦截的请求地址, "/**"表示任何请求地址都必须有ROLE_USER的权限 -->
        <security:intercept-url pattern="/**" access="ROLE_USER"/>

        <!--
            配置具体的页面跳转;
            login-page: 指定登录页面,
            login-processing-url: 登录请求路径,
            default-target-url: 登录成功后进入的页面,
            authentication-failure-url: 登录失败后进入的页面;
        -->
        <security:form-login
                login-page="/login.jsp"
                login-processing-url="/login"
                always-use-default-target="true"
                default-target-url="/success.jsp"
                authentication-failure-url="/error.jsp"/>

        <!--
            配置退出;
            invalidate-session: 是否刷新session,
            logout-url: 退出请求地址,
            logout-success-url: 退出成功后访问的页面;
        -->
        <security:logout invalidate-session="true"
                         logout-url="/logout"
                         logout-success-url="/login.html"/>

        <!-- 关闭跨域请求 -->
        <security:csrf disabled="true"/>
    </security:http>

    <!-- 配置认证信息 -->
    <security:authentication-manager>
        <!-- 认证信息的提供者 -->
        <security:authentication-provider>
            <!-- 用户的服务对象 -->
            <security:user-service>
                <!--
                    用户信息, 这里是写死的账号密码;
                    noop: 不使用加密;
                    authorities: 指定用户认证的角色;
                -->
                <security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>

</beans>